import { BaseAgent, type AgentContext } from './base.js';
import type { AgentResponse } from '../types/index.js';

// =====================================================
// AGENTE DESENVOLVEDOR S√äNIOR
// =====================================================

export class DeveloperAgent extends BaseAgent {
  constructor() {
    super(
      'developer',
      'Desenvolvedor S√™nior',
      'üíª',
      'C√≥digo REAL que funciona',
      'Como fazer funcionar HOJE?'
    );
  }

  async analyze(context: AgentContext): Promise<AgentResponse> {
    this.logger.info(`Analisando implementa√ß√£o: ${context.description}`);

    try {
      const analysis = this.performCodeAnalysis(context);
      
      const confidence = this.calculateConfidence({
        complexity: analysis.complexity,
        familiarity: 5, // Desenvolvimento √© nossa especialidade
        riskLevel: analysis.riskLevel,
        dataQuality: context.codeContext ? 5 : 3,
      });

      return this.formatResponse(
        analysis.implementation,
        confidence,
        analysis.suggestions
      );
    } catch (error) {
      this.logger.error('Erro na an√°lise de desenvolvimento:', error);
      return this.formatResponse(
        'Erro na an√°lise de c√≥digo. Recomendo revis√£o manual do contexto.',
        0.1
      );
    }
  }

  private performCodeAnalysis(context: AgentContext): {
    implementation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const { description, todo } = context;
    const type = todo?.type || 'feature';

    if (type === 'bug') {
      return this.generateBugFixCode(description);
    } else if (type === 'feature') {
      return this.generateFeatureCode(description);
    } else if (type === 'integration') {
      return this.generateIntegrationCode(description);
    } else {
      return this.generateGenericCode(description);
    }
  }

  private generateBugFixCode(description: string): {
    implementation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const isNullReference = /null|nulo|reference/i.test(description);
    const isIndexError = /index|array|lista/i.test(description);
    const isValidationError = /valida√ß√£o|validation|campo/i.test(description);

    if (isNullReference) {
      return {
        implementation: `
// Implementar verifica√ß√µes de null safety
try 
{
    if (oCompany?.GetByKey(docEntry) == true)
    {
        // Verificar se objeto n√£o √© null antes de usar
        if (oDocument != null && !string.IsNullOrEmpty(oDocument.CardCode))
        {
            // Processar documento
        }
        else
        {
            throw new ArgumentNullException("Documento ou CardCode inv√°lido");
        }
    }
}
catch (Exception ex)
{
    Logger.Error($"Erro ao processar documento {docEntry}: {ex.Message}");
    throw;
}`,
        complexity: 2,
        riskLevel: 1,
        suggestions: [
          'Implementar null checks em todos os pontos cr√≠ticos',
          'Usar operador ?. quando dispon√≠vel',
          'Adicionar logs detalhados para debug',
          'Criar testes unit√°rios para cen√°rios null'
        ]
      };
    }

    if (isIndexError) {
      return {
        implementation: `
// Implementar verifica√ß√µes de bounds
try
{
    var items = oDocument.Lines;
    for (int i = 0; i < items.Count; i++)
    {
        items.SetCurrentLine(i);
        
        // Verificar se √≠ndice √© v√°lido
        if (i >= 0 && i < items.Count)
        {
            var itemCode = items.ItemCode;
            // Processar item
        }
    }
}
catch (IndexOutOfRangeException ex)
{
    Logger.Error($"Erro de √≠ndice: {ex.Message}");
    throw new InvalidOperationException("√çndice inv√°lido na cole√ß√£o");
}`,
        complexity: 2,
        riskLevel: 2,
        suggestions: [
          'Sempre verificar Count antes de acessar √≠ndices',
          'Usar foreach quando poss√≠vel',
          'Implementar valida√ß√£o de ranges',
          'Adicionar logs para debug de √≠ndices'
        ]
      };
    }

    return {
      implementation: 'Implementar corre√ß√£o espec√≠fica baseada na an√°lise detalhada do erro.',
      complexity: 3,
      riskLevel: 3,
      suggestions: [
        'Reproduzir erro em ambiente controlado',
        'Adicionar logging detalhado',
        'Implementar tratamento de exce√ß√µes',
        'Criar testes de regress√£o'
      ]
    };
  }

  private generateFeatureCode(description: string): {
    implementation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const isCrud = /criar|editar|excluir|listar/i.test(description);
    const isCalculation = /calcular|c√°lculo|f√≥rmula/i.test(description);
    const isValidation = /validar|valida√ß√£o|regra/i.test(description);

    if (isCrud) {
      return {
        implementation: `
// Implementar opera√ß√µes CRUD com Service Layer
public class DocumentService
{
    private readonly ILogger _logger;
    private readonly SAPConnection _connection;

    public async Task<DocumentResponse> CreateDocumentAsync(DocumentRequest request)
    {
        try
        {
            // Validar entrada
            ValidateRequest(request);
            
            // Conectar ao SAP
            var company = await _connection.GetCompanyAsync();
            
            // Criar documento
            var oDocument = (Documents)company.GetBusinessObject(BoObjectTypes.oOrders);
            
            // Preencher campos
            oDocument.CardCode = request.CustomerCode;
            oDocument.DocDate = DateTime.Now;
            
            // Adicionar linhas
            foreach (var line in request.Lines)
            {
                oDocument.Lines.ItemCode = line.ItemCode;
                oDocument.Lines.Quantity = line.Quantity;
                oDocument.Lines.Add();
            }
            
            // Salvar
            var result = oDocument.Add();
            if (result != 0)
            {
                var error = company.GetLastErrorDescription();
                throw new SAPException($"Erro ao criar documento: {error}");
            }
            
            var docEntry = company.GetNewObjectKey();
            _logger.LogInformation($"Documento criado: {docEntry}");
            
            return new DocumentResponse { DocEntry = int.Parse(docEntry) };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao criar documento");
            throw;
        }
    }
}`,
        complexity: 3,
        riskLevel: 2,
        suggestions: [
          'Implementar padr√£o Repository',
          'Usar inje√ß√£o de depend√™ncia',
          'Adicionar valida√ß√µes robustas',
          'Implementar transa√ß√µes quando necess√°rio'
        ]
      };
    }

    if (isCalculation) {
      return {
        implementation: `
// Implementar c√°lculos com precis√£o decimal
public class CalculationService
{
    public decimal CalculateTotal(List<LineItem> items, decimal taxRate = 0)
    {
        try
        {
            decimal subtotal = 0;
            
            foreach (var item in items)
            {
                // Usar decimal para precis√£o
                var lineTotal = item.Quantity * item.UnitPrice;
                var discount = lineTotal * (item.DiscountPercent / 100);
                subtotal += lineTotal - discount;
            }
            
            // Aplicar impostos
            var tax = subtotal * (taxRate / 100);
            var total = subtotal + tax;
            
            // Arredondar para 2 casas decimais
            return Math.Round(total, 2, MidpointRounding.AwayFromZero);
        }
        catch (Exception ex)
        {
            Logger.Error($"Erro no c√°lculo: {ex.Message}");
            throw new CalculationException("Erro ao calcular total", ex);
        }
    }
}`,
        complexity: 2,
        riskLevel: 2,
        suggestions: [
          'Sempre usar decimal para valores monet√°rios',
          'Implementar arredondamento consistente',
          'Validar entradas antes de calcular',
          'Criar testes com casos extremos'
        ]
      };
    }

    return {
      implementation: 'Implementar feature seguindo padr√µes SAP B1 e boas pr√°ticas de desenvolvimento.',
      complexity: 3,
      riskLevel: 2,
      suggestions: [
        'Seguir padr√µes de nomenclatura SAP',
        'Implementar logging adequado',
        'Usar async/await para opera√ß√µes I/O',
        'Criar documenta√ß√£o inline'
      ]
    };
  }

  private generateIntegrationCode(description: string): {
    implementation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const isApi = /api|rest|webservice/i.test(description);
    const isFile = /arquivo|file|csv|xml/i.test(description);

    if (isApi) {
      return {
        implementation: `
// Implementar integra√ß√£o API com retry e circuit breaker
public class ApiIntegrationService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly RetryPolicy _retryPolicy;

    public async Task<ApiResponse<T>> CallApiAsync<T>(ApiRequest request)
    {
        try
        {
            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            // Implementar retry com backoff exponencial
            var response = await _retryPolicy.ExecuteAsync(async () =>
            {
                var httpResponse = await _httpClient.PostAsync(request.Endpoint, content);
                
                if (!httpResponse.IsSuccessStatusCode)
                {
                    var error = await httpResponse.Content.ReadAsStringAsync();
                    throw new ApiException($"API Error: {httpResponse.StatusCode} - {error}");
                }
                
                return httpResponse;
            });
            
            var responseJson = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<ApiResponse<T>>(responseJson);
            
            _logger.LogInformation($"API call successful: {request.Endpoint}");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"API call failed: {request.Endpoint}");
            throw;
        }
    }
}`,
        complexity: 4,
        riskLevel: 3,
        suggestions: [
          'Implementar circuit breaker pattern',
          'Usar HttpClientFactory',
          'Implementar cache quando apropriado',
          'Adicionar m√©tricas de performance'
        ]
      };
    }

    if (isFile) {
      return {
        implementation: `
// Implementar processamento de arquivo com streaming
public class FileProcessingService
{
    public async Task<ProcessResult> ProcessFileAsync(string filePath)
    {
        var result = new ProcessResult();
        
        try
        {
            using var reader = new StreamReader(filePath);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            
            var records = csv.GetRecordsAsync<ImportRecord>();
            var batch = new List<ImportRecord>();
            
            await foreach (var record in records)
            {
                // Validar registro
                if (ValidateRecord(record))
                {
                    batch.Add(record);
                    
                    // Processar em lotes de 100
                    if (batch.Count >= 100)
                    {
                        await ProcessBatchAsync(batch);
                        result.ProcessedCount += batch.Count;
                        batch.Clear();
                    }
                }
                else
                {
                    result.ErrorCount++;
                    _logger.LogWarning($"Registro inv√°lido: {record}");
                }
            }
            
            // Processar √∫ltimo lote
            if (batch.Any())
            {
                await ProcessBatchAsync(batch);
                result.ProcessedCount += batch.Count;
            }
            
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Erro ao processar arquivo: {filePath}");
            throw;
        }
    }
}`,
        complexity: 3,
        riskLevel: 2,
        suggestions: [
          'Usar streaming para arquivos grandes',
          'Implementar valida√ß√£o robusta',
          'Processar em lotes para performance',
          'Implementar rollback em caso de erro'
        ]
      };
    }

    return {
      implementation: 'Implementar integra√ß√£o seguindo padr√µes de resili√™ncia e performance.',
      complexity: 4,
      riskLevel: 3,
      suggestions: [
        'Implementar retry logic',
        'Usar async/await consistentemente',
        'Adicionar logging detalhado',
        'Implementar monitoramento'
      ]
    };
  }

  private generateGenericCode(description: string): {
    implementation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      implementation: `
// Template base para implementa√ß√£o SAP B1
public class SAPBusinessLogic
{
    private readonly ILogger _logger;
    private readonly ISAPConnection _connection;

    public async Task<Result> ExecuteBusinessLogicAsync(BusinessRequest request)
    {
        try
        {
            // 1. Validar entrada
            ValidateInput(request);
            
            // 2. Conectar ao SAP
            var company = await _connection.GetCompanyAsync();
            
            // 3. Executar l√≥gica de neg√≥cio
            var result = await ProcessBusinessLogic(company, request);
            
            // 4. Log e retorno
            _logger.LogInformation("Opera√ß√£o executada com sucesso");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro na execu√ß√£o da l√≥gica de neg√≥cio");
            throw;
        }
    }
    
    private void ValidateInput(BusinessRequest request)
    {
        if (request == null)
            throw new ArgumentNullException(nameof(request));
            
        // Adicionar valida√ß√µes espec√≠ficas
    }
}`,
      complexity: 3,
      riskLevel: 2,
      suggestions: [
        'Definir estrutura clara do c√≥digo',
        'Implementar valida√ß√µes adequadas',
        'Usar padr√µes de design apropriados',
        'Adicionar testes unit√°rios'
      ]
    };
  }
}

// =====================================================
// AGENTE DBA ESPECIALISTA
// =====================================================

export class DBAAgent extends BaseAgent {
  constructor() {
    super(
      'dba',
      'DBA Especialista',
      'üóÑÔ∏è',
      'Performance e integridade',
      'Qual o impacto na performance?'
    );
  }

  async analyze(context: AgentContext): Promise<AgentResponse> {
    this.logger.info(`Analisando impacto no banco: ${context.description}`);

    try {
      const analysis = this.performDatabaseAnalysis(context);
      
      const confidence = this.calculateConfidence({
        complexity: analysis.complexity,
        familiarity: 4, // Banco SAP B1 √© conhecido
        riskLevel: analysis.riskLevel,
        dataQuality: 4,
      });

      return this.formatResponse(
        analysis.recommendation,
        confidence,
        analysis.suggestions
      );
    } catch (error) {
      this.logger.error('Erro na an√°lise de banco:', error);
      return this.formatResponse(
        'Erro na an√°lise de performance. Recomendo an√°lise manual do impacto.',
        0.1
      );
    }
  }

  private performDatabaseAnalysis(context: AgentContext): {
    recommendation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const { description } = context;
    
    const hasQuery = /query|select|update|insert|delete/i.test(description);
    const hasLargeData = /milhares|milh√µes|grande volume|lote/i.test(description);
    const hasJoins = /join|relacionamento|tabelas/i.test(description);
    const hasAggregation = /sum|count|group|agrega√ß√£o/i.test(description);

    if (hasLargeData) {
      return {
        recommendation: 'ATEN√á√ÉO: Grande volume de dados detectado. Implemente pagina√ß√£o, use √≠ndices apropriados e considere processamento em lotes. Monitore locks e deadlocks.',
        complexity: 4,
        riskLevel: 4,
        suggestions: [
          'Implementar pagina√ß√£o com OFFSET/FETCH',
          'Criar √≠ndices nas colunas de filtro',
          'Usar NOLOCK apenas quando apropriado',
          'Monitorar tempo de execu√ß√£o das queries',
          'Considerar particionamento de tabelas',
          'Implementar timeout adequado'
        ]
      };
    }

    if (hasJoins && hasAggregation) {
      return {
        recommendation: 'Queries complexas com JOINs e agrega√ß√µes podem impactar performance. Use √≠ndices compostos, considere views materializadas e otimize WHERE clauses.',
        complexity: 4,
        riskLevel: 3,
        suggestions: [
          'Criar √≠ndices compostos para JOINs',
          'Usar EXISTS ao inv√©s de IN quando poss√≠vel',
          'Filtrar dados o mais cedo poss√≠vel',
          'Considerar views para queries recorrentes',
          'Analisar execution plan',
          'Implementar cache para resultados est√°veis'
        ]
      };
    }

    if (hasQuery) {
      return {
        recommendation: 'Para opera√ß√µes de banco, sempre use par√¢metros para evitar SQL injection. Implemente transa√ß√µes para opera√ß√µes m√∫ltiplas e monitore performance.',
        complexity: 3,
        riskLevel: 2,
        suggestions: [
          'Usar par√¢metros em todas as queries',
          'Implementar transa√ß√µes quando necess√°rio',
          'Adicionar √≠ndices nas colunas de busca',
          'Monitorar tempo de execu√ß√£o',
          'Implementar retry para deadlocks',
          'Usar connection pooling'
        ]
      };
    }

    return {
      recommendation: 'Considere o impacto no banco de dados. Valide se opera√ß√µes s√£o necess√°rias e otimize acesso aos dados.',
      complexity: 2,
      riskLevel: 2,
      suggestions: [
        'Minimizar acessos ao banco',
        'Usar cache quando apropriado',
        'Implementar lazy loading',
        'Monitorar uso de recursos'
      ]
    };
  }
}

// =====================================================
// AGENTE QA ANALYST
// =====================================================

export class QAAgent extends BaseAgent {
  constructor() {
    super(
      'qa',
      'QA Analyst',
      'üß™',
      'Edge cases e testes',
      'Onde pode quebrar?'
    );
  }

  async analyze(context: AgentContext): Promise<AgentResponse> {
    this.logger.info(`Analisando cen√°rios de teste: ${context.description}`);

    try {
      const analysis = this.performQAAnalysis(context);
      
      const confidence = this.calculateConfidence({
        complexity: analysis.complexity,
        familiarity: 4, // QA √© nossa especialidade
        riskLevel: analysis.riskLevel,
        dataQuality: 4,
      });

      return this.formatResponse(
        analysis.testStrategy,
        confidence,
        analysis.suggestions
      );
    } catch (error) {
      this.logger.error('Erro na an√°lise de QA:', error);
      return this.formatResponse(
        'Erro na an√°lise de qualidade. Recomendo revis√£o manual dos cen√°rios.',
        0.1
      );
    }
  }

  private performQAAnalysis(context: AgentContext): {
    testStrategy: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const { description, todo } = context;
    const type = todo?.type || 'feature';

    if (type === 'bug') {
      return this.analyzeBugTesting(description);
    } else if (type === 'integration') {
      return this.analyzeIntegrationTesting(description);
    } else {
      return this.analyzeFeatureTesting(description);
    }
  }

  private analyzeBugTesting(description: string): {
    testStrategy: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      testStrategy: 'Para corre√ß√£o de bugs: 1) Reproduzir erro consistentemente, 2) Criar teste que falha, 3) Implementar corre√ß√£o, 4) Validar que teste passa, 5) Executar testes de regress√£o.',
      complexity: 3,
      riskLevel: 3,
      suggestions: [
        'Criar caso de teste espec√≠fico para o bug',
        'Testar cen√°rios similares (regress√£o)',
        'Validar em diferentes ambientes',
        'Testar com dados reais e sint√©ticos',
        'Verificar logs de erro detalhados',
        'Testar performance ap√≥s corre√ß√£o'
      ]
    };
  }

  private analyzeIntegrationTesting(description: string): {
    testStrategy: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      testStrategy: 'Para integra√ß√µes: Teste cen√°rios de sucesso, falha de rede, timeout, dados inv√°lidos, volumes grandes e recupera√ß√£o de erro. Use mocks para testes unit√°rios.',
      complexity: 4,
      riskLevel: 4,
      suggestions: [
        'Testar com API indispon√≠vel',
        'Simular timeout de rede',
        'Testar com dados malformados',
        'Validar retry logic',
        'Testar com volumes grandes',
        'Verificar logs de auditoria',
        'Testar rollback em caso de erro',
        'Validar idempot√™ncia'
      ]
    };
  }

  private analyzeFeatureTesting(description: string): {
    testStrategy: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const isCrud = /criar|editar|excluir|listar/i.test(description);
    const isCalculation = /calcular|c√°lculo/i.test(description);
    const isUI = /tela|interface|formul√°rio/i.test(description);

    if (isCrud) {
      return {
        testStrategy: 'Para CRUD: Teste cria√ß√£o com dados v√°lidos/inv√°lidos, edi√ß√£o de registros existentes/inexistentes, exclus√£o com/sem depend√™ncias, listagem com filtros e pagina√ß√£o.',
        complexity: 3,
        riskLevel: 2,
        suggestions: [
          'Testar valida√ß√µes de entrada',
          'Testar com dados nos limites',
          'Verificar permiss√µes de usu√°rio',
          'Testar concorr√™ncia (dois usu√°rios)',
          'Validar integridade referencial',
          'Testar com caracteres especiais'
        ]
      };
    }

    if (isCalculation) {
      return {
        testStrategy: 'Para c√°lculos: Teste com valores zero, negativos, decimais, muito grandes, muito pequenos. Valide precis√£o, arredondamento e casos extremos.',
        complexity: 3,
        riskLevel: 3,
        suggestions: [
          'Testar com valores zero e negativos',
          'Validar precis√£o decimal',
          'Testar overflow/underflow',
          'Verificar arredondamento',
          'Testar com dados hist√≥ricos',
          'Validar f√≥rmulas complexas'
        ]
      };
    }

    if (isUI) {
      return {
        testStrategy: 'Para UI: Teste em diferentes browsers, resolu√ß√µes, com/sem JavaScript, acessibilidade, usabilidade e responsividade.',
        complexity: 3,
        riskLevel: 2,
        suggestions: [
          'Testar em Chrome, Firefox, Edge',
          'Validar responsividade mobile',
          'Testar acessibilidade (WCAG)',
          'Verificar performance de carregamento',
          'Testar com dados reais',
          'Validar navega√ß√£o por teclado'
        ]
      };
    }

    return {
      testStrategy: 'Implementar testes abrangentes cobrindo cen√°rios positivos, negativos e extremos. Usar pir√¢mide de testes: unit√°rios, integra√ß√£o, E2E.',
      complexity: 3,
      riskLevel: 2,
      suggestions: [
        'Criar testes unit√°rios primeiro',
        'Implementar testes de integra√ß√£o',
        'Adicionar testes E2E cr√≠ticos',
        'Usar dados de teste realistas',
        'Implementar testes de performance',
        'Criar documenta√ß√£o de testes'
      ]
    };
  }
}

