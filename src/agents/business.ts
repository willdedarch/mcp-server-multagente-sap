import { BaseAgent, type AgentContext } from './base.js';
import type { AgentResponse } from '../types/index.js';

// =====================================================
// AGENTE ANALISTA DE NEG√ìCIOS
// =====================================================

export class BusinessAgent extends BaseAgent {
  constructor() {
    super(
      'business',
      'Analista de Neg√≥cios',
      'üìä',
      'Processo SAP real',
      'Isso resolve o problema real?'
    );
  }

  async analyze(context: AgentContext): Promise<AgentResponse> {
    this.logger.info(`Analisando impacto no neg√≥cio: ${context.description}`);

    try {
      const analysis = this.performBusinessAnalysis(context);
      
      const confidence = this.calculateConfidence({
        complexity: analysis.complexity,
        familiarity: 4, // Processos SAP s√£o conhecidos
        riskLevel: analysis.riskLevel,
        dataQuality: context.businessRules ? 5 : 3,
      });

      return this.formatResponse(
        analysis.businessImpact,
        confidence,
        analysis.suggestions
      );
    } catch (error) {
      this.logger.error('Erro na an√°lise de neg√≥cio:', error);
      return this.formatResponse(
        'Erro na an√°lise de impacto no neg√≥cio. Recomendo valida√ß√£o manual com usu√°rios.',
        0.1
      );
    }
  }

  private performBusinessAnalysis(context: AgentContext): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const { description } = context;
    
    const isFinancial = /financeiro|cont√°bil|fiscal|imposto|faturamento/i.test(description);
    const isInventory = /estoque|item|produto|movimenta√ß√£o/i.test(description);
    const isSales = /vendas|pedido|cliente|comiss√£o/i.test(description);
    const isPurchasing = /compras|fornecedor|cota√ß√£o|ordem/i.test(description);
    const isReporting = /relat√≥rio|dashboard|kpi|an√°lise/i.test(description);

    if (isFinancial) {
      return this.analyzeFinancialImpact(description);
    } else if (isInventory) {
      return this.analyzeInventoryImpact(description);
    } else if (isSales) {
      return this.analyzeSalesImpact(description);
    } else if (isPurchasing) {
      return this.analyzePurchasingImpact(description);
    } else if (isReporting) {
      return this.analyzeReportingImpact(description);
    } else {
      return this.analyzeGeneralBusinessImpact(description);
    }
  }

  private analyzeFinancialImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'IMPACTO FINANCEIRO CR√çTICO: Mudan√ßas no m√≥dulo financeiro afetam compliance fiscal, relat√≥rios cont√°beis e fluxo de caixa. Validar com contador e auditor antes da implementa√ß√£o.',
      complexity: 5,
      riskLevel: 5,
      suggestions: [
        'Validar com departamento cont√°bil',
        'Verificar impacto em relat√≥rios fiscais',
        'Testar com dados do m√™s anterior',
        'Validar c√°lculos de impostos',
        'Verificar integra√ß√£o com sistemas externos',
        'Criar backup antes de implementar',
        'Planejar rollback se necess√°rio',
        'Documentar mudan√ßas para auditoria'
      ]
    };
  }

  private analyzeInventoryImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'IMPACTO NO ESTOQUE: Altera√ß√µes podem afetar disponibilidade de produtos, custos e planejamento de compras. Coordenar com almoxarifado e compras.',
      complexity: 4,
      riskLevel: 4,
      suggestions: [
        'Validar com equipe de almoxarifado',
        'Verificar impacto no planejamento MRP',
        'Testar com produtos de alta rotatividade',
        'Validar c√°lculos de custo m√©dio',
        'Verificar relat√≥rios de movimenta√ß√£o',
        'Coordenar com equipe de compras',
        'Planejar invent√°rio ap√≥s mudan√ßas'
      ]
    };
  }

  private analyzeSalesImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'IMPACTO NAS VENDAS: Mudan√ßas podem afetar processo de vendas, comissionamento e relacionamento com clientes. Treinar equipe comercial.',
      complexity: 3,
      riskLevel: 3,
      suggestions: [
        'Treinar equipe de vendas',
        'Validar c√°lculo de comiss√µes',
        'Testar processo completo de vendas',
        'Verificar impacto nos pre√ßos',
        'Validar com clientes piloto',
        'Atualizar materiais de treinamento',
        'Monitorar satisfa√ß√£o do cliente'
      ]
    };
  }

  private analyzePurchasingImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'IMPACTO NAS COMPRAS: Altera√ß√µes podem afetar relacionamento com fornecedores, prazos de entrega e custos. Coordenar com equipe de compras.',
      complexity: 3,
      riskLevel: 3,
      suggestions: [
        'Coordenar com equipe de compras',
        'Validar com fornecedores principais',
        'Testar processo de cota√ß√£o',
        'Verificar aprova√ß√µes necess√°rias',
        'Validar integra√ß√£o com e-procurement',
        'Monitorar prazos de entrega',
        'Atualizar procedimentos de compra'
      ]
    };
  }

  private analyzeReportingImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'IMPACTO EM RELAT√ìRIOS: Mudan√ßas podem afetar tomada de decis√£o gerencial e compliance. Validar com usu√°rios finais e gestores.',
      complexity: 2,
      riskLevel: 2,
      suggestions: [
        'Validar com usu√°rios finais',
        'Testar com dados hist√≥ricos',
        'Verificar performance dos relat√≥rios',
        'Validar f√≥rmulas e c√°lculos',
        'Treinar usu√°rios nas mudan√ßas',
        'Criar documenta√ß√£o atualizada',
        'Monitorar uso dos relat√≥rios'
      ]
    };
  }

  private analyzeGeneralBusinessImpact(description: string): {
    businessImpact: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    return {
      businessImpact: 'Avaliar impacto nos processos de neg√≥cio. Identificar usu√°rios afetados e planejar treinamento adequado.',
      complexity: 3,
      riskLevel: 2,
      suggestions: [
        'Identificar usu√°rios impactados',
        'Mapear processos afetados',
        'Planejar treinamento',
        'Criar documenta√ß√£o de usu√°rio',
        'Definir crit√©rios de aceita√ß√£o',
        'Planejar rollout gradual'
      ]
    };
  }
}

// =====================================================
// AGENTE PRODUCT OWNER
// =====================================================

export class ProductOwnerAgent extends BaseAgent {
  constructor() {
    super(
      'po',
      'Product Owner',
      'üéØ',
      'Prioriza√ß√£o e valor',
      '√â isso que devemos fazer agora?'
    );
  }

  async analyze(context: AgentContext): Promise<AgentResponse> {
    this.logger.info(`Analisando prioridade e valor: ${context.description}`);

    try {
      const analysis = this.performPriorityAnalysis(context);
      
      const confidence = this.calculateConfidence({
        complexity: analysis.complexity,
        familiarity: 4, // Prioriza√ß√£o √© nossa especialidade
        riskLevel: analysis.riskLevel,
        dataQuality: 4,
      });

      return this.formatResponse(
        analysis.priorityRecommendation,
        confidence,
        analysis.suggestions
      );
    } catch (error) {
      this.logger.error('Erro na an√°lise de prioridade:', error);
      return this.formatResponse(
        'Erro na an√°lise de prioridade. Recomendo revis√£o manual do valor de neg√≥cio.',
        0.1
      );
    }
  }

  private performPriorityAnalysis(context: AgentContext): {
    priorityRecommendation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    const { description, todo } = context;
    const type = todo?.type || 'feature';
    const priority = todo?.priority || 'medium';

    // An√°lise de valor vs esfor√ßo
    const businessValue = this.assessBusinessValue(description);
    const technicalEffort = this.assessTechnicalEffort(description);
    const urgency = this.assessUrgency(description, type);
    const risk = this.assessRisk(description, type);

    return this.generatePriorityRecommendation(businessValue, technicalEffort, urgency, risk, priority);
  }

  private assessBusinessValue(description: string): number {
    let value = 3; // Base value

    // Alto valor
    if (/cr√≠tico|urgente|cliente|receita|compliance/i.test(description)) value += 2;
    if (/automa√ß√£o|efici√™ncia|produtividade/i.test(description)) value += 1;
    if (/relat√≥rio|dashboard|an√°lise/i.test(description)) value += 1;

    // Baixo valor
    if (/cosm√©tico|visual|nice to have/i.test(description)) value -= 1;
    if (/refatora√ß√£o|limpeza|documenta√ß√£o/i.test(description)) value -= 1;

    return Math.max(1, Math.min(5, value));
  }

  private assessTechnicalEffort(description: string): number {
    let effort = 3; // Base effort

    // Alto esfor√ßo
    if (/integra√ß√£o|api|migra√ß√£o|arquitetura/i.test(description)) effort += 2;
    if (/complexo|m√∫ltiplos|depend√™ncias/i.test(description)) effort += 1;
    if (/performance|otimiza√ß√£o/i.test(description)) effort += 1;

    // Baixo esfor√ßo
    if (/simples|r√°pido|pequeno|configura√ß√£o/i.test(description)) effort -= 1;
    if (/corre√ß√£o|ajuste|bug/i.test(description)) effort -= 1;

    return Math.max(1, Math.min(5, effort));
  }

  private assessUrgency(description: string, type: string): number {
    let urgency = 3; // Base urgency

    if (type === 'bug') urgency += 2;
    if (/urgente|cr√≠tico|parado|bloqueado/i.test(description)) urgency += 2;
    if (/deadline|prazo|entrega/i.test(description)) urgency += 1;
    if (/futuro|planejado|eventual/i.test(description)) urgency -= 1;

    return Math.max(1, Math.min(5, urgency));
  }

  private assessRisk(description: string, type: string): number {
    let risk = 2; // Base risk

    if (/financeiro|fiscal|cont√°bil/i.test(description)) risk += 2;
    if (/integra√ß√£o|api|terceiros/i.test(description)) risk += 1;
    if (/dados|migra√ß√£o|convers√£o/i.test(description)) risk += 1;
    if (/interface|cosm√©tico|visual/i.test(description)) risk -= 1;

    return Math.max(1, Math.min(5, risk));
  }

  private generatePriorityRecommendation(
    businessValue: number,
    technicalEffort: number,
    urgency: number,
    risk: number,
    currentPriority: string
  ): {
    priorityRecommendation: string;
    complexity: number;
    riskLevel: number;
    suggestions: string[];
  } {
    // Calcular score de prioridade
    const valueEffortRatio = businessValue / technicalEffort;
    const urgencyWeight = urgency * 0.3;
    const riskPenalty = risk * 0.2;
    
    const priorityScore = (valueEffortRatio + urgencyWeight - riskPenalty);

    let recommendedPriority: string;
    let reasoning: string;

    if (priorityScore >= 2.5) {
      recommendedPriority = 'high';
      reasoning = 'Alto valor de neg√≥cio com esfor√ßo justific√°vel';
    } else if (priorityScore >= 1.5) {
      recommendedPriority = 'medium';
      reasoning = 'Valor moderado, pode ser planejado para pr√≥ximas sprints';
    } else if (priorityScore >= 1.0) {
      recommendedPriority = 'low';
      reasoning = 'Baixo valor ou alto esfor√ßo, considerar para backlog futuro';
    } else {
      recommendedPriority = 'low';
      reasoning = 'Question√°vel valor de neg√≥cio, reavaliar necessidade';
    }

    const priorityRecommendation = `PRIORIDADE RECOMENDADA: ${recommendedPriority.toUpperCase()} (atual: ${currentPriority}). ${reasoning}. Score: ${priorityScore.toFixed(2)} (Valor: ${businessValue}/5, Esfor√ßo: ${technicalEffort}/5, Urg√™ncia: ${urgency}/5, Risco: ${risk}/5)`;

    const suggestions = this.generatePrioritySuggestions(businessValue, technicalEffort, urgency, risk, recommendedPriority);

    return {
      priorityRecommendation,
      complexity: technicalEffort,
      riskLevel: risk,
      suggestions
    };
  }

  private generatePrioritySuggestions(
    businessValue: number,
    technicalEffort: number,
    urgency: number,
    risk: number,
    priority: string
  ): string[] {
    const suggestions: string[] = [];

    if (priority === 'high') {
      suggestions.push('Alocar desenvolvedor s√™nior');
      suggestions.push('Definir timeline agressivo');
      suggestions.push('Monitorar progresso diariamente');
      if (risk >= 4) suggestions.push('Implementar em ambiente de teste primeiro');
    }

    if (priority === 'medium') {
      suggestions.push('Planejar para pr√≥xima sprint');
      suggestions.push('Quebrar em tarefas menores se poss√≠vel');
      suggestions.push('Validar requisitos com stakeholders');
    }

    if (priority === 'low') {
      suggestions.push('Adicionar ao backlog para revis√£o futura');
      suggestions.push('Considerar alternativas mais simples');
      if (businessValue <= 2) suggestions.push('Questionar real necessidade');
    }

    if (technicalEffort >= 4) {
      suggestions.push('Considerar MVP ou implementa√ß√£o faseada');
      suggestions.push('Avaliar alternativas t√©cnicas');
      suggestions.push('Estimar esfor√ßo com mais precis√£o');
    }

    if (risk >= 4) {
      suggestions.push('Criar plano de rollback');
      suggestions.push('Implementar em hor√°rio de baixo movimento');
      suggestions.push('Ter equipe de suporte dispon√≠vel');
    }

    if (urgency >= 4) {
      suggestions.push('Considerar solu√ß√£o tempor√°ria');
      suggestions.push('Comunicar impacto aos stakeholders');
      suggestions.push('Priorizar sobre outras tarefas');
    }

    return suggestions;
  }
}

